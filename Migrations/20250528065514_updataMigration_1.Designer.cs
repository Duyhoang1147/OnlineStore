// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using OnlineStore.Data;

#nullable disable

namespace OnlineStore.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20250528065514_updataMigration_1")]
    partial class updataMigration_1
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("OnlineStore.Model.Category", b =>
                {
                    b.Property<Guid>("CategoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CategoryName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<bool>("isDeleted")
                        .HasColumnType("bit");

                    b.HasKey("CategoryId");

                    b.ToTable("Categories");
                });

            modelBuilder.Entity("OnlineStore.Model.Product", b =>
                {
                    b.Property<Guid>("ProductId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<float>("Price")
                        .HasColumnType("real");

                    b.Property<string>("ProductName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<Guid>("SubCategoryId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("isDeleted")
                        .HasColumnType("bit");

                    b.HasKey("ProductId");

                    b.HasIndex("SubCategoryId");

                    b.ToTable("products");
                });

            modelBuilder.Entity("OnlineStore.Model.ProductAttribute", b =>
                {
                    b.Property<Guid>("ProductAttributeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ProductAttributeTypeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ProductId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("value")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ProductAttributeId");

                    b.HasIndex("ProductAttributeTypeId");

                    b.HasIndex("ProductId");

                    b.ToTable("productAttributes");
                });

            modelBuilder.Entity("OnlineStore.Model.ProductAttributeType", b =>
                {
                    b.Property<Guid>("ProductAttributeTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ProductAttributeTypeName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<bool>("isDeleted")
                        .HasColumnType("bit");

                    b.HasKey("ProductAttributeTypeId");

                    b.ToTable("productAttributeTypes");
                });

            modelBuilder.Entity("OnlineStore.Model.SubCategory", b =>
                {
                    b.Property<Guid>("SubCategoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("SubCategoryName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<Guid>("categoryId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("isDeleted")
                        .HasColumnType("bit");

                    b.HasKey("SubCategoryId");

                    b.HasIndex("categoryId");

                    b.ToTable("SubCategories");
                });

            modelBuilder.Entity("ProductAttributeTypeSubCategory", b =>
                {
                    b.Property<Guid>("ProductAttributeTypesProductAttributeTypeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("subCategoriesSubCategoryId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("ProductAttributeTypesProductAttributeTypeId", "subCategoriesSubCategoryId");

                    b.HasIndex("subCategoriesSubCategoryId");

                    b.ToTable("ProductAttributeTypeSubCategory");
                });

            modelBuilder.Entity("OnlineStore.Model.Product", b =>
                {
                    b.HasOne("OnlineStore.Model.SubCategory", "subCategory")
                        .WithMany("products")
                        .HasForeignKey("SubCategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("subCategory");
                });

            modelBuilder.Entity("OnlineStore.Model.ProductAttribute", b =>
                {
                    b.HasOne("OnlineStore.Model.ProductAttributeType", "productAttributeType")
                        .WithMany("productAttributes")
                        .HasForeignKey("ProductAttributeTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("OnlineStore.Model.Product", "product")
                        .WithMany("productAttributes")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("product");

                    b.Navigation("productAttributeType");
                });

            modelBuilder.Entity("OnlineStore.Model.SubCategory", b =>
                {
                    b.HasOne("OnlineStore.Model.Category", "category")
                        .WithMany("SubCategoryId")
                        .HasForeignKey("categoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("category");
                });

            modelBuilder.Entity("ProductAttributeTypeSubCategory", b =>
                {
                    b.HasOne("OnlineStore.Model.ProductAttributeType", null)
                        .WithMany()
                        .HasForeignKey("ProductAttributeTypesProductAttributeTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("OnlineStore.Model.SubCategory", null)
                        .WithMany()
                        .HasForeignKey("subCategoriesSubCategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("OnlineStore.Model.Category", b =>
                {
                    b.Navigation("SubCategoryId");
                });

            modelBuilder.Entity("OnlineStore.Model.Product", b =>
                {
                    b.Navigation("productAttributes");
                });

            modelBuilder.Entity("OnlineStore.Model.ProductAttributeType", b =>
                {
                    b.Navigation("productAttributes");
                });

            modelBuilder.Entity("OnlineStore.Model.SubCategory", b =>
                {
                    b.Navigation("products");
                });
#pragma warning restore 612, 618
        }
    }
}
